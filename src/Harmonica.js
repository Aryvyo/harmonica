/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Scar56 (https://sketchfab.com/Scar56)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/harmonica-blues-harp-af5ac47932f34104a6779e77517c0573
title: Harmonica Blues Harp
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import Wad from 'web-audio-daw';
import { useEffect } from 'react';
import useSound from 'use-sound';

class FileConstructor {
  constructor() {
    this.array = [];
    this.poly = new Wad.Poly({
      /*recorder: {
          options: { },
          onstop: function(event) {
              // constructFile(this.recorder.chunks, { 'type' : 'audio/mp3;codecs=opus' });
              let url = URL.createObjectURL(new Blob(this.recorder.chunks));
              var a = document.createElement('a');
              a.href = url;
              a.download = 'harmonica.mp3';
              a.click();
              URL.revokeObjectURL(url);
              
          }
      }*/
  });

  }
  addWad(wad) {
    this.poly.add(wad);
  }
  addStop(stop){
    this.array.push(stop);
  }
  stopAll() {
    for (let i = 0; i < this.array.length; i++) {
      this.array[i]();
    }
  }
  getArray() {
    return this.array;
  }
}

const array = new FileConstructor();
export { array }

export default function Model({ ...props }) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/harmonica/harmonica.gltf')
  const [mobile, setMobile] = React.useState(false)

  useEffect(() => {
    if (navigator.userAgent.match(/(iPod|iPhone|iPad)/) && navigator.userAgent.match(/AppleWebKit/)) {  
      setMobile(true);
    }else if (navigator.userAgentData?.mobile)  {
      setMobile(true);
    }
    console.log(mobile);
    }, [])

  return (
    <group castShadow ref={group} {...props} dispose={null}>
      <group position={[0, 2, 0]} rotation={[Math.PI / 2, 0, Math.PI / 2]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <mesh castShadow geometry={nodes.defaultMaterial.geometry} material={materials.M_Metal_1} />
            <mesh castShadow geometry={nodes.defaultMaterial_1.geometry} material={materials.M_Metal_2} />
            <mesh castShadow geometry={nodes.defaultMaterial_2.geometry} material={materials.M_Wood_1} />




            <HoverZone position={[0.012,0.0321,0.01]} note="1" FileConstructor={array} mobile={mobile}/>
            <HoverZone position={[0.012,0.025,0.01]} note="2" FileConstructor={array} mobile={mobile}/>
            <HoverZone position={[0.012,0.0179,0.01]} note="3" FileConstructor={array} mobile={mobile}/>
            <HoverZone position={[0.012,0.0108,0.01]} note="4" FileConstructor={array} mobile={mobile}/>
            <HoverZone position={[0.012,0.0037,0.01]} note="5" FileConstructor={array} mobile={mobile}/>
            <HoverZone position={[0.012,-0.0037,0.01]} note="6" FileConstructor={array} mobile={mobile}/>
            <HoverZone position={[0.012,-0.0108,0.01]} note="7" FileConstructor={array} mobile={mobile}/>
            <HoverZone position={[0.012,-0.0179,0.01]} note="8" FileConstructor={array} mobile={mobile}/>
            <HoverZone position={[0.012,-0.025,0.01]} note="9" FileConstructor={array} mobile={mobile}/>
            <HoverZone position={[0.012,-0.0321,0.01]} note="10" FileConstructor={array} mobile={mobile}/>

          </group>
        </group>
      </group>
    </group>
  )
}



function HoverZone({...props}) {
  const mesh = useRef();
  const [playing,setPlaying] = React.useState(false);
  const [transp,setTransp] = React.useState(0);
  const mobile = props.mobile;
  const [play, {stop, sound}] = useSound("/audio/" + props.note + ".wav")
  const [decay] = useSound("/audio/" + props.note + "decay.wav")
  array.addStop(stop);

  const onHover = () => {
    if (props.mobile) {
      

    }
    setPlaying(true);
    array.stopAll();

    play();
    sound.fade(1,0.7,0.3);

  }

  const onHoverExit = async () => {
    console.log("exit");
    stop();
    //decay();
    setPlaying(false);
  }

    return (
      <mesh {...props} ref={mesh} onClick={() => {onHover();}} onPointerUp={()=>{onHoverExit();}} onPointerOver={() => {onHover();}} onPointerLeave={()=>{onHoverExit();}}>
      <boxGeometry args={[.005,.005,.005]} />
      <meshStandardMaterial opacity={transp} transparent/>
      </mesh>
    )
      



}


useGLTF.preload('/harmonica/harmonica.gltf')

